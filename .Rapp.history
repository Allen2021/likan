devtools::install_github('likanzhan/acqr')
devtools::install_github('likanzhan/acqr', force = T)
library(car)
library(acqr)
help(package=acqr)
RegCod()
RegCod(2,4)
RegCod(4,4)
RegCod(5,5)
RegCod(5,5, Dummy=F)
library(acqr)
help(package=acqr)
IntAcMain()
IntAcMain(4)
IntAcMain()
IntAcMain(, 5)
IntAcMain(5)
IntAcMain(5, adjust = 1.2)
library(acqr)
IntAcMain(5, adjust = 1.2)
IntAcMain(5, adjust = 0.8)
IntAcMain(5, adjust = 0.5)
IntAcMain(5, adjust = 1)
IntAcMain(5, adjust = 1.5)
IntAcMain(5, adjust = 2)
update.packages(ask=F)
library(acqr)
help(package="acqr")
library(eyetrackingR)
add_aoi
methods(analyze_boot_splines)
clean_by_trackloss
analyze_time_clusters
methods(analyze_time_clusters)
eyetrackingR:::analyze_time_clusters.time_cluster_data
filter_time_sequence_data
filter_.time_sequence_data
methods(filter)
methods(filter_)
methods(filter_.time_sequence_data)
methods(filter)
methods(time_sequence_data)
methods(class="time_sequence_data")
make_boot_splines_data
methods(make_boot_splines_data)
get_time_clusters
methods(get_time_clusters)
filter_time_sequence_data
eyetrackingR:::get_time_clusters.time_cluster_data
make_boot_splines_data
methods(make_boot_splines_data)
eyetrackingR:::make_boot_splines_data.time_sequence_data
make_onset_data
make_switch_data
methods(make_switch_data)
eyetrackingR:::make_switch_data.onset_data
eyetrackingR:::make_time_cluster_data.time_sequence_data
eyetrackingR:::make_time_sequence_data.time_sequence_data
methods(make_time_sequence_data)
make_time_sequence_data
make_time_window_data
simulate_eyetrackingr_data
plot.bin_analysis
eyatrackingR:::plot.bin_analysis
methods(plot)
plot.bin_analysis
eyetrackingR::::plot.bin_analysis
eyetrackingR:::plot.bin_analysis
methods(mutate)
methods(mutate_)
methods(mutate_.)
?mutate
?mutate_.time_sequence_data
mutate_.time_sequence_data
methods(time_sequence_data)
methods(class=time_sequence_data)
methods(class="time_sequence_data")
plot.bin_analysis
eyetrackingR:::plot.bin_analysis
eyetrackingR:::plot.cluster_data
print.cluster_analysis
eyetrackingR:::print.cluster_analysis
subset.time_sequence_data
eyetrackingR:::subset.time_sequence_data
subset_by_window
summary.bin_analysis
eyetrackingR:::summary.bin_analysis
trackloss_analysis
ungroup.time_sequence_data
methods(ungroup.time_sequence_data)
eyetrackingR:::ungroup.time_sequence_data
set.seed(42)#
#
library("Matrix")#
library("lme4")#
library("ggplot2")#
library("eyetrackingR")#
#
data("word_recognition")#
data <- make_eyetrackingr_data(word_recognition, #
                       participant_column = "ParticipantName",#
                       trial_column = "Trial",#
                       time_column = "TimeFromTrialOnset",#
                       trackloss_column = "TrackLoss",#
                       aoi_columns = c('Animate','Inanimate'),#
                       treat_non_aoi_looks_as_missing = TRUE#
)#
# subset to response window post word-onset#
response_window <- subset_by_window(data, #
                                    window_start_time = 15500, #
                                    window_end_time = 21000, #
                                    rezero = FALSE)#
#
# remove trials with > 25% of trackloss#
response_window_clean <- clean_by_trackloss(data = response_window,#
                                            trial_prop_thresh = .25)#
#
# create Target condition column#
response_window_clean$Target <- as.factor( ifelse(test = grepl('(Spoon|Bottle)', response_window_clean$Trial), #
                                       yes = 'Inanimate', #
                                       no  = 'Animate') )
data_summary <- describe_data(response_window_clean, #
                               describe_column='Animate', group_columns=c('Target','ParticipantName'))
data_summary
str(data_summary)
plot(data_summary)
set.seed(42)#
library("Matrix")#
library("lme4")#
library("ggplot2")#
library("eyetrackingR")#
data("word_recognition")#
data <- make_eyetrackingr_data(word_recognition, #
                       participant_column = "ParticipantName",#
                       trial_column = "Trial",#
                       time_column = "TimeFromTrialOnset",#
                       trackloss_column = "TrackLoss",#
                       aoi_columns = c('Animate','Inanimate'),#
                       treat_non_aoi_looks_as_missing = TRUE#
)#
#
# subset to response window post word-onset#
response_window <- subset_by_window(data, #
                                    window_start_time = 15500, #
                                    window_end_time = 21000, #
                                    rezero = FALSE)#
#
# analyze amount of trackloss by subjects and trials#
(trackloss <- trackloss_analysis(data = response_window))#
#
# remove trials with > 25% of trackloss#
response_window_clean <- clean_by_trackloss(data = response_window, trial_prop_thresh = .25)#
#
# create Target condition column#
response_window_clean$Target <- as.factor( ifelse(test = grepl('(Spoon|Bottle)', response_window_clean$Trial), #
                                       yes = 'Inanimate', #
                                       no  = 'Animate') )
onsets <- make_onset_data(response_window_clean, onset_time = 15500, #
                          fixation_window_length = 1, target_aoi='TrialTarget')
str(onsets)
onsets <- make_onset_data(response_window_clean, onset_time = 15500, #
                          fixation_window_length = 1, target_aoi='TrialTarget')
# recode AOIs to target & distractor#
response_window_clean$TrialTarget <- ifelse(test = response_window_clean$Target == 'Animate', #
                                            yes = response_window_clean$Animate, #
                                            no = response_window_clean$Inanimate)#
response_window_clean$TrialDistractor <- ifelse(test = response_window_clean$Target == 'Animate', #
                                                yes = response_window_clean$Inanimate, #
                                                no = response_window_clean$Animate)
onsets <- make_onset_data(response_window_clean, onset_time = 15500, #
                          fixation_window_length = 1, target_aoi='TrialTarget')#
# participants' ability to orient to the trial target overall:#
plot(onsets) + theme(legend.text=element_text(size=5))
str(onsets)
plot.time_cluster_data
eyetrackingR:::plot.time_cluster_data
methods(plot.time_cluster_data)
methods(plot)
plot.time_cluster_data
eyetrackingR:::plot.time_cluster_data
plot(attr(x, "eyetrackingR")$time_bin_summary
)
?plot
eyetrackingR:::plot.time_cluster_data
library(eyetrackingR)
as.character(lsf.str("package:eyetrackingR"))
lsf.str("package:eyetrackingR")
as.character(lsf.str("package:eyetrackingR"))
?lsf.str
library(eyetrackingR)
left_join.time_sequence_data#
EyetrackingR friendly Left-Join
left_join.time_sequence_data
methods(left_join)
methods(left_join.time_sequence_data#
EyetrackingR friendly Left-Join)
methods(left_join.time_sequence_data)
methods(left_join,)
methods(class=time_sequence_data)
methods(class="time_sequence_data")
make_time_sequence_data
?make_time_sequence_data
.make_proportion_looking_summary
eyetrackingR:::.make_proportion_looking_summary
eyetrackingR:::.convert_non_aoi_to_missing
library(eyetrackingR)
eyetrackingR::make_eyetrackingr_data
data_options = list(participant_column = participant_column, #
        trackloss_column = trackloss_column, time_column = time_column, #
        trial_column = trial_column, item_columns = item_columns, #
        aoi_columns = aoi_columns, treat_non_aoi_looks_as_missing = treat_non_aoi_looks_as_missing)
library(eyetrackingR)#
#
data = word_recognition#
participant_column = "ParticipantName"#
trackloss_column = "TrackLoss"#
time_column = "TimeFromTrialOnset"#
trial_column = "Trial"#
aoi_columns = c("Animate", "Inanimate")#
treat_non_aoi_looks_as_missing = TRUE#
item_columns = NULL
data_options = list(participant_column = participant_column, #
        trackloss_column = trackloss_column, time_column = time_column, #
        trial_column = trial_column, item_columns = item_columns, #
        aoi_columns = aoi_columns, treat_non_aoi_looks_as_missing = treat_non_aoi_looks_as_missing)
data_options
colnames(data)
col_type_converter <- list(participant_column = function(x) check_then_convert(x, #
        is.factor, as.factor, "Participants"), time_column = function(x) check_then_convert(x, #
        is.numeric, as.numeric2, "Time"), trial_column = function(x) check_then_convert(x, #
        is.factor, as.factor, "Trial"), trackloss_column = function(x) check_then_convert(x, #
        is.logical2, as.logical, "Trackloss"), item_columns = function(x) check_then_convert(x, #
        is.factor, as.factor, "Item"), aoi_columns = function(x) check_then_convert(x, #
        is.logical2, as.logical, "AOI"))
col_type_converter
names(col_type_converter)
str(col_type_converter)
data_options
names(col_type_converter)
seq_along(data_options[[col]])
data_options
str(data_options)
data_options[[col]]
is.null(out[[data_options[[col]]
)
is.null(out[[data_options[[col]][i]]]
)
out
out <- data
is.null(out[[data_options[[col]][i]]])
str(data)
str(out)
for (col in names(col_type_converter)) {#
        for (i in seq_along(data_options[[col]])) {#
            if (is.null(out[[data_options[[col]][i]]])) #
                stop("Data are missing: ", col)#
            out[[data_options[[col]][i]]] <- col_type_converter[[col]](out[[data_options[[col]][i]]])#
        }#
    }
as.numeric2 <- function(x) as.numeric(as.character(x))#
    is.logical2 <- function(x) {#
        if (is.logical(x)) {#
            return(TRUE)#
        }#
        else if (is.numeric(x)) {#
            return(FALSE)#
        }#
        else {#
            stop("One of your columns (", col, ") could not be converted to the correct format (TRUE/FALSE), ", #
                "please do so manually.")#
        }#
    }#
    check_then_convert <- function(x, checkfunc, convertfunc, colname) {#
        if (!checkfunc(x)) {#
            message("Converting ", colname, " to proper type.")#
            x <- convertfunc(x)#
        }#
        if (colname == "Trackloss" & any(is.na(x))) {#
            warning("Found NAs in trackloss column, these will be treated as TRACKLOSS=FALSE.")#
            x <- ifelse(is.na(x), FALSE, x)#
        }#
        return(x)#
    }
for (col in names(col_type_converter)) {#
        for (i in seq_along(data_options[[col]])) {#
            if (is.null(out[[data_options[[col]][i]]])) #
                stop("Data are missing: ", col)#
            out[[data_options[[col]][i]]] <- col_type_converter[[col]](out[[data_options[[col]][i]]])#
        }#
    }
str(data)
str(out)
str(data_options)
out$data_options
data_options[[col]]
str(data_options)
attributes(data_options)
data_options
data_options
data_options$col
data_options@col
data_options[[col]]
str(data_options)
class(data_options)
data_options
attributes(data_options)
?'[['
getElement(data_options)
getElement(data_options,"col")
getElement(data_options,"col")
slot(data_options, "col")
?list
names(data_options)
attributes(data_options)
data_options
data_options[[col]]
data_options[["col"]]
col
names(col_type_converter)
data_options[[col]]
seq_along(data_options[[col]]
)
col_type_converter <- list(participant_column = function(x) check_then_convert(x, #
        is.factor, as.factor, "Participants"), time_column = function(x) check_then_convert(x, #
        is.numeric, as.numeric2, "Time"), trial_column = function(x) check_then_convert(x, #
        is.factor, as.factor, "Trial"), trackloss_column = function(x) check_then_convert(x, #
        is.logical2, as.logical, "Trackloss"), item_columns = function(x) check_then_convert(x, #
        is.factor, as.factor, "Item"), aoi_columns = function(x) check_then_convert(x, #
        is.logical2, as.logical, "AOI"))
names(col_type_converter)
names(col_type_converter)
col in names(col_type_converter)
col <- names(col_type_converter)
col
seq_along(data_options[[col]])
data_options
data_options[[1]]
data_options[[2]]
seq_along()
seq_along(data_options[[2]])
seq_along(data_options[[3]])
seq_along(data_options[[3]])
?seq_along
seq_along(1:5)
seq_along(5)
seq_along(5:10)
seq_along(5:10)
seq(5:10)
library(blogdown)
help(package=blogdown)
blogdown::new_post("seq() and seq_along()", rmd=T)
help(package=blogdown)
blogdown::new_post("seq() and seq_along().Rmd")
setwd("~/Documents/ADMIN/website/hugo")#
blogdown::new_post("seq() versus seq_along().Rmd", author = "侃侃迩行")
options(servr.daemon = TRUE)#
setwd("~/Documents/ADMIN/website/likan")#
blogdown::new_post("seq() versus seq_along().Rmd", author = "侃侃迩行")
options(servr.daemon = TRUE)#
setwd("~/Documents/ADMIN/website/likan")#
blogdown::new_post("seq() versus seq_along()", author = "侃侃迩行", ext = "Rmd")
options(servr.daemon = TRUE)#
setwd("~/Documents/ADMIN/website/likan")#
blogdown::new_post("seq() versus seq_along()", author = "侃侃迩行", ext = ".Rmd")
seq_len(3)
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
library(eyetrackingR)#
#
data = word_recognition#
participant_column = "ParticipantName"#
trackloss_column = "TrackLoss"#
time_column = "TimeFromTrialOnset"#
trial_column = "Trial"#
aoi_columns = c("Animate", "Inanimate")#
treat_non_aoi_looks_as_missing = TRUE#
item_columns = NULL#
    as.numeric2 <- function(x) as.numeric(as.character(x))#
    is.logical2 <- function(x) {#
        if (is.logical(x)) {#
            return(TRUE)#
        }#
        else if (is.numeric(x)) {#
            return(FALSE)#
        }#
        else {#
            stop("One of your columns (", col, ") could not be converted to the correct format (TRUE/FALSE), ", #
                "please do so manually.")#
        }#
    }#
    check_then_convert <- function(x, checkfunc, convertfunc, colname) {#
        if (!checkfunc(x)) {#
            message("Converting ", colname, " to proper type.")#
            x <- convertfunc(x)#
        }#
        if (colname == "Trackloss" & any(is.na(x))) {#
            warning("Found NAs in trackloss column, these will be treated as TRACKLOSS=FALSE.")#
            x <- ifelse(is.na(x), FALSE, x)#
        }#
        return(x)#
    }#
    data_options = list(participant_column = participant_column, #
        trackloss_column = trackloss_column, time_column = time_column, #
        trial_column = trial_column, item_columns = item_columns, #
        aoi_columns = aoi_columns, treat_non_aoi_looks_as_missing = treat_non_aoi_looks_as_missing)#
    if (data_options$time_column == "Time") {#
        stop("We apologize for the inconvenience, but your `time_column` cannot be called 'Time' ", #
            "(this is a reserved name that eyetrackingR uses). Please rename.")#
    }#
    if ("Time" %in% colnames(data)) {#
        warning("Your dataset has a column called 'Time', but this column name is reserved for eyetrackingR. Will rename to 'TimeOriginal'...")#
        data$TimeOriginal <- data$Time#
        data$Time <- NULL#
    }#
    out <- data#
    col_type_converter <- list(participant_column = function(x) check_then_convert(x, #
        is.factor, as.factor, "Participants"), time_column = function(x) check_then_convert(x, #
        is.numeric, as.numeric2, "Time"), trial_column = function(x) check_then_convert(x, #
        is.factor, as.factor, "Trial"), trackloss_column = function(x) check_then_convert(x, #
        is.logical2, as.logical, "Trackloss"), item_columns = function(x) check_then_convert(x, #
        is.factor, as.factor, "Item"), aoi_columns = function(x) check_then_convert(x, #
        is.logical2, as.logical, "AOI"))#
    for (col in names(col_type_converter)) {#
        for (i in seq_along(data_options[[col]])) {#
            if (is.null(out[[data_options[[col]][i]]])) #
                stop("Data are missing: ", col)#
            out[[data_options[[col]][i]]] <- col_type_converter[[col]](out[[data_options[[col]][i]]])#
        }#
    }
str(out)
out[[data_options]]
